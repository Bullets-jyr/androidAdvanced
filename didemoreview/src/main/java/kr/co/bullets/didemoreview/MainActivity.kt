package kr.co.bullets.didemoreview

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import javax.inject.Inject

class MainActivity : AppCompatActivity() {

    // We can use @Inject annotation to tell dagger, or to give permission to dagger to use a constructor to make an object of that class. If it is required to inject the object as a dependency.
    // if an inject annotated constructor has other dependencies as parameters, dagger will look for the ways to inject them as well.
    @Inject
    lateinit var smartPhone: SmartPhone

//    @Inject
//    lateinit var memoryCard: MemoryCard

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // First of all we need to rebuild the project. Because dagger has not generated codes yet.
        // By rebuilding the project we can get them generated by dagger.
//        DaggerSmartPhoneComponent.create()
//            .getSmartPhone()
//            .inject(this)
//            .makeACallWithRecording()

//        smartPhone.makeACallWithRecording()

//        DaggerSmartPhoneComponent.builder()
//            .memoryCardModule(MemoryCardModule(1000))
//            .build()
//            .inject(this)

//        smartPhone.makeACallWithRecording()

        (application as SmartPhoneApplication).smartPhoneComponent.inject(this)
        smartPhone.makeACallWithRecording()

//        val battery = Battery()
//        val memoryCard = MemoryCard()
//        val serviceProvider = ServiceProvider()
//        val simCard = SIMCard(serviceProvider)
        // This type of dependency injection is called Constructor injection.
//        val smartPhone = SmartPhone(battery, simCard, memoryCard)
//        smartPhone.makeACallWithRecording()

//        val smartPhone = SmartPhone(
//            Battery(),
//            SIMCard(ServiceProvider()),
//            MemoryCard()
//        )
//            .makeACallWithRecording()
    }
}